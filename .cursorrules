General Guidlines:
- You're an expert in Next.js, React, Tailwind CSS, and shadcn/ui.
- You're an expert in ride sharing/maps apps/transit apps from both a product development and user experience perspective.
- Always think what's the best experience for the user.
- Always follow clean, accessible, and performant code.
- Code needs to be maintainable and scalable.

# LauderGO Shuttle Tracker - Project Overview

## App Name & Purpose
LauderGO Shuttle Tracker - A modern web application to help Fort Lauderdale residents and visitors easily track, plan, and manage their shuttle transportation across the city's free community shuttle service.

## Tech Stack
### Frontend
- Next.js with App Router for modern, server-side rendered React applications
- React for component-based UI development
- Tailwind CSS for styling
- shadcn/ui for consistent, accessible components
- Mapbox or Google Maps API for route visualization

### Backend
- Next.js API routes for server-side functionality
- PostgreSQL with Supabase for:
  - Real-time GPS tracking data
  - Schedule and route information
  - Anonymous route preferences (localStorage)
- WebSocket connections for real-time shuttle tracking updates

## Main Features
### Route Planning & Management
- Interactive map interface showing all shuttle routes
- Real-time GPS tracking of shuttle locations
- Route search with origin/destination input
- Route scheduling with upcoming departure times
- Temporary route bookmarking (localStorage)
- Route details including estimated travel times and stop sequences

### Core Experience
- Anonymous access to all core features
- Route planning and visualization
- Real-time shuttle location updates
- Locally stored preferences
- Mobile-responsive interface

### Administrative Features
- Real-time shuttle tracking management
- Schedule updates and management
- Route modification capabilities
- Usage analytics and reporting

## Design Principles
- Clean, intuitive interface prioritizing ease of use
- Mobile-first responsive design
- Consistent branding with City of Fort Lauderdale guidelines
- Accessibility compliance (WCAG 2.1)
- Clear information hierarchy

## Performance Goals
- Initial page load under 2 seconds
- Real-time updates with minimal latency
- Offline functionality for basic route information
- Smooth map interactions and transitions
- Optimal mobile performance

## Scalability Considerations
- Architecture designed to support future integration with:
  - Additional transportation services
  - Bus routes
  - Other municipal transit systems
- Database structure allowing for service expansion
- API design supporting multiple transportation types

## Security & Privacy
- Anonymous usage tracking
- Data encryption for sensitive information
- Regular security audits
- Privacy-focused data collection
- Compliance with local government data standards

## Code Quality Standards
- TypeScript for type safety
- Component-based architecture
- Comprehensive testing strategy
  - Unit tests
  - Integration tests
  - End-to-end testing
- Consistent code style and documentation
- Regular code reviews
- Version control best practices

## Monitoring & Analytics
- Real-time system health monitoring
- Usage analytics and reporting
- Performance metrics tracking
- Error tracking and logging
- Anonymous feedback collection

## Future Expansion Possibilities
- User account creation and management
- Saved routes and preferences syncing
- Personalized route history
- Route favorites and reminders
- Mobile app development
- Payment system integration
- Multi-language support
- Advanced route optimization
- Integration with popular navigation apps
- Integration with other city transportation services


Color Palette:
• Primary Blue: `#0052A5`
• Primary Orange: `#F26522`
• Secondary Blue (hover state): `#004080`
• Secondary Orange (hover state): `#E55511`
• Background White: `#FFFFFF`
• Light Gray (for backgrounds): `#F3F4F6`
• Medium Gray (for borders): `#E5E7EB`
• Dark Gray (for text): `#374151`
• Muted Text: `#6B7280`
Typography:
• Font Family: System default sans-serif (you may consider adding a specific font like Inter or Roboto for consistency)
• Font Sizes:

- Heading 1 (h1): 24px (1.5rem)
- Heading 2 (h2): 20px (1.25rem)
- Body Text: 16px (1rem)
- Small Text: 14px (0.875rem)
• Font Weights:
- Regular: 400
- Medium: 500
- Semibold: 600
- Bold: 700



Spacing:
• Base unit: 4px
• Common spacings: 4px, 8px, 16px, 24px, 32px, 48px
Border Radius:
• Small: 4px
• Medium: 8px
• Large: 16px
• Full: 9999px (for circular elements)
Shadows:
• Light: 0 1px 3px rgba(0, 0, 0, 0.1)
• Medium: 0 4px 6px rgba(0, 0, 0, 0.1)
• Heavy: 0 10px 15px rgba(0, 0, 0, 0.1)
Icons:
• Use Lucide React icons for consistency
• Icon sizes: 16px, 20px, 24px
Buttons:
• Primary: Background `#F26522`, Text white
• Secondary: Background white, Border `#E5E7EB`, Text `#374151`
• Hover states: Darken background color by 10%
• Disabled state: Reduce opacity to 50%
Input Fields:
• Border: 1px solid `#E5E7EB`
• Border Radius: 8px
• Focus state: Border color `#0052A5`, add a light blue glow
Cards:
• Background: White
• Border: 1px solid `#E5E7EB`
• Border Radius: 8px
• Box Shadow: 0 4px 6px rgba(0, 0, 0, 0.1)
Transitions:
• Duration: 200ms
• Easing: ease-in-out
Responsive Breakpoints:
• Mobile: Up to 640px
• Tablet: 641px to 1024px
• Desktop: 1025px and above
Map Theme:
• Keep the default OpenStreetMap style for now, but consider creating a custom style that matches your application's color scheme in the future